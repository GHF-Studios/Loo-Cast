#include "../../Libraries/Universe/DensityMap.compute"
#include "../../Libraries/Noise/CellularNoise.compute"

#pragma kernel CSMain

struct UniverseGenerationSettings
{
    int seed;
    int size;
    float mapFromMin;
    float mapFromMax;
    float mapToMin;
    float mapToMax;
    float power;
    float frequency;
    int octaves;
    float persistence;
    float lacunarity;
    float amplitude;
    float cellularJitter;
};

RWStructuredBuffer<UniverseGenerationSettings> universeGenerationSettingsBuffer;
RWStructuredBuffer<DensityData> universeDensityMap;

DensityData SampleUniverseDensity(DensityData universeDensity)
{
    universeDensity.Value = sampleNoise(universeDensity.XPosition - universeGenerationSettingsBuffer[0].size, universeDensity.YPosition - universeGenerationSettingsBuffer[0].size, universeGenerationSettingsBuffer[0].seed, universeGenerationSettingsBuffer[0].frequency, universeGenerationSettingsBuffer[0].octaves, universeGenerationSettingsBuffer[0].persistence, universeGenerationSettingsBuffer[0].lacunarity, universeGenerationSettingsBuffer[0].amplitude, universeGenerationSettingsBuffer[0].cellularJitter);
    return universeDensity;
}

DensityData ProcessUniverseDensity(DensityData universeDensity)
{
    universeDensity.Value = map(universeDensity.Value, universeGenerationSettingsBuffer[0].mapFromMin, universeGenerationSettingsBuffer[0].mapFromMax, universeGenerationSettingsBuffer[0].mapToMin, universeGenerationSettingsBuffer[0].mapToMax);
    universeDensity.Value = pow(universeDensity.Value, universeGenerationSettingsBuffer[0].power);
    universeDensity.Value = universeDensity.Value * universeGenerationSettingsBuffer[0].amplitude;

    return universeDensity;
}

[numthreads(16,16,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int x = id.x;
    int y = id.y;
    int index = y * universeGenerationSettingsBuffer[0].size + x;
    universeDensityMap[index] = SampleUniverseDensity(universeDensityMap[index]);
    universeDensityMap[index] = ProcessUniverseDensity(universeDensityMap[index]);
}