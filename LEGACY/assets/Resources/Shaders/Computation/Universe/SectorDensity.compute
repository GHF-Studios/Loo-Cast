#include "../../Libraries/Universe/DensityMap.compute"
#include "../../Libraries/Noise/PerlinNoise.compute"

#pragma kernel CSMain

struct SectorGenerationSettings
{
    int seed;
    int chunkSize;
    float mapFromMin;
    float mapFromMax;
    float mapToMin;
    float mapToMax;
    float filamentNoiseInfluence;
    float power;
    float frequency;
    int octaves;
    float persistence;
    float lacunarity;
    float amplitude;
};

RWStructuredBuffer<SectorGenerationSettings> sectorGenerationSettingsBuffer;
RWStructuredBuffer<DensityData> electronDensityMap;
RWStructuredBuffer<DensityData> positronDensityMap;
RWStructuredBuffer<DensityData> protonDensityMap;
RWStructuredBuffer<DensityData> antiProtonDensityMap;
RWStructuredBuffer<DensityData> neutronDensityMap;
RWStructuredBuffer<DensityData> antiNeutronDensityMap;
RWStructuredBuffer<DensityData> solidParticleDensityMap;
RWStructuredBuffer<DensityData> liquidParticleDensityMap;
RWStructuredBuffer<DensityData> gasParticleDensityMap;
RWStructuredBuffer<DensityData> plasmaParticleDensityMap;

DensityData SampleSolidParticleDensity(DensityData solidParticleDensity)
{
    solidParticleDensity.Value = sampleNoise(solidParticleDensity.XPosition - sectorGenerationSettingsBuffer[0].chunkSize, solidParticleDensity.YPosition - sectorGenerationSettingsBuffer[0].chunkSize, sectorGenerationSettingsBuffer[0].seed, sectorGenerationSettingsBuffer[0].frequency, sectorGenerationSettingsBuffer[0].octaves, sectorGenerationSettingsBuffer[0].persistence, sectorGenerationSettingsBuffer[0].lacunarity, sectorGenerationSettingsBuffer[0].amplitude);
    return solidParticleDensity;
}

DensityData SampleLiquidParticleDensity(DensityData liquidParticleDensity)
{
    liquidParticleDensity.Value = sampleNoise(liquidParticleDensity.XPosition - sectorGenerationSettingsBuffer[0].chunkSize, liquidParticleDensity.YPosition - sectorGenerationSettingsBuffer[0].chunkSize, sectorGenerationSettingsBuffer[0].seed, sectorGenerationSettingsBuffer[0].frequency, sectorGenerationSettingsBuffer[0].octaves, sectorGenerationSettingsBuffer[0].persistence, sectorGenerationSettingsBuffer[0].lacunarity, sectorGenerationSettingsBuffer[0].amplitude);
    return liquidParticleDensity;
}

DensityData SampleGasParticleDensity(DensityData gasParticleDensity)
{
    gasParticleDensity.Value = sampleNoise(gasParticleDensity.XPosition - sectorGenerationSettingsBuffer[0].chunkSize, gasParticleDensity.YPosition - sectorGenerationSettingsBuffer[0].chunkSize, sectorGenerationSettingsBuffer[0].seed, sectorGenerationSettingsBuffer[0].frequency, sectorGenerationSettingsBuffer[0].octaves, sectorGenerationSettingsBuffer[0].persistence, sectorGenerationSettingsBuffer[0].lacunarity, sectorGenerationSettingsBuffer[0].amplitude);
    return gasParticleDensity;
}

DensityData SamplePlasmaParticleDensity(DensityData plasmaParticleDensity)
{
    plasmaParticleDensity.Value = sampleNoise(plasmaParticleDensity.XPosition - sectorGenerationSettingsBuffer[0].chunkSize, plasmaParticleDensity.YPosition - sectorGenerationSettingsBuffer[0].chunkSize, sectorGenerationSettingsBuffer[0].seed, sectorGenerationSettingsBuffer[0].frequency, sectorGenerationSettingsBuffer[0].octaves, sectorGenerationSettingsBuffer[0].persistence, sectorGenerationSettingsBuffer[0].lacunarity, sectorGenerationSettingsBuffer[0].amplitude);
    return plasmaParticleDensity;
}

DensityData ProcessSolidParticleDensity(DensityData solidParticleDensity, DensityData electronDensity, DensityData positronDensity, DensityData protonDensity, DensityData antiProtonDensity, DensityData neutronDensity, DensityData antiNeutronDensity)
{
    solidParticleDensity.Value = map(solidParticleDensity.Value, sectorGenerationSettingsBuffer[0].mapFromMin, sectorGenerationSettingsBuffer[0].mapFromMax, sectorGenerationSettingsBuffer[0].mapToMin, sectorGenerationSettingsBuffer[0].mapToMax);
    solidParticleDensity.Value = pow(solidParticleDensity.Value, sectorGenerationSettingsBuffer[0].power);
    solidParticleDensity.Value = solidParticleDensity.Value * sectorGenerationSettingsBuffer[0].amplitude;
    
    // TODO: Implement actual algorithm
    solidParticleDensity.Value = solidParticleDensity.Value * (1 + (sectorGenerationSettingsBuffer[0].filamentNoiseInfluence * electronDensity.Value));
    return solidParticleDensity;
}

DensityData ProcessLiquidParticleDensity(DensityData liquidParticleDensity, DensityData electronDensity, DensityData positronDensity, DensityData protonDensity, DensityData antiProtonDensity, DensityData neutronDensity, DensityData antiNeutronDensity)
{
    liquidParticleDensity.Value = map(liquidParticleDensity.Value, sectorGenerationSettingsBuffer[0].mapFromMin, sectorGenerationSettingsBuffer[0].mapFromMax, sectorGenerationSettingsBuffer[0].mapToMin, sectorGenerationSettingsBuffer[0].mapToMax);
    liquidParticleDensity.Value = pow(liquidParticleDensity.Value, sectorGenerationSettingsBuffer[0].power);
    liquidParticleDensity.Value = liquidParticleDensity.Value * sectorGenerationSettingsBuffer[0].amplitude;
    
    // TODO: Implement actual algorithm
    liquidParticleDensity.Value = liquidParticleDensity.Value * (1 + (sectorGenerationSettingsBuffer[0].filamentNoiseInfluence * electronDensity.Value));
    return liquidParticleDensity;
}

DensityData ProcessGasParticleDensity(DensityData gasParticleDensity, DensityData electronDensity, DensityData positronDensity, DensityData protonDensity, DensityData antiProtonDensity, DensityData neutronDensity, DensityData antiNeutronDensity)
{
    gasParticleDensity.Value = map(gasParticleDensity.Value, sectorGenerationSettingsBuffer[0].mapFromMin, sectorGenerationSettingsBuffer[0].mapFromMax, sectorGenerationSettingsBuffer[0].mapToMin, sectorGenerationSettingsBuffer[0].mapToMax);
    gasParticleDensity.Value = pow(gasParticleDensity.Value, sectorGenerationSettingsBuffer[0].power);
    gasParticleDensity.Value = gasParticleDensity.Value * sectorGenerationSettingsBuffer[0].amplitude;
    
    // TODO: Implement actual algorithm
    gasParticleDensity.Value = gasParticleDensity.Value * (1 + (sectorGenerationSettingsBuffer[0].filamentNoiseInfluence * electronDensity.Value));
    return gasParticleDensity;
}

DensityData ProcessPlasmaParticleDensity(DensityData plasmaParticleDensity, DensityData electronDensity, DensityData positronDensity, DensityData protonDensity, DensityData antiProtonDensity, DensityData neutronDensity, DensityData antiNeutronDensity)
{
    plasmaParticleDensity.Value = map(plasmaParticleDensity.Value, sectorGenerationSettingsBuffer[0].mapFromMin, sectorGenerationSettingsBuffer[0].mapFromMax, sectorGenerationSettingsBuffer[0].mapToMin, sectorGenerationSettingsBuffer[0].mapToMax);
    plasmaParticleDensity.Value = pow(plasmaParticleDensity.Value, sectorGenerationSettingsBuffer[0].power);
    plasmaParticleDensity.Value = plasmaParticleDensity.Value * sectorGenerationSettingsBuffer[0].amplitude;
    
    // TODO: Implement actual algorithm
    plasmaParticleDensity.Value = plasmaParticleDensity.Value * (1 + (sectorGenerationSettingsBuffer[0].filamentNoiseInfluence * electronDensity.Value));
    return plasmaParticleDensity;
}

[numthreads(16,16,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int x = id.x;
    int y = id.y;
    int index = y * sectorGenerationSettingsBuffer[0].chunkSize + x;
    solidParticleDensityMap[index] = SampleSolidParticleDensity(solidParticleDensityMap[index]);
    liquidParticleDensityMap[index] = SampleLiquidParticleDensity(liquidParticleDensityMap[index]);
    gasParticleDensityMap[index] = SampleGasParticleDensity(gasParticleDensityMap[index]);
    plasmaParticleDensityMap[index] = SamplePlasmaParticleDensity(plasmaParticleDensityMap[index]);
    solidParticleDensityMap[index] = ProcessSolidParticleDensity(solidParticleDensityMap[index], electronDensityMap[index], positronDensityMap[index], protonDensityMap[index], antiProtonDensityMap[index], neutronDensityMap[index], antiNeutronDensityMap[index]);
    liquidParticleDensityMap[index] = ProcessLiquidParticleDensity(liquidParticleDensityMap[index], electronDensityMap[index], positronDensityMap[index], protonDensityMap[index], antiProtonDensityMap[index], neutronDensityMap[index], antiNeutronDensityMap[index]);
    gasParticleDensityMap[index] = ProcessGasParticleDensity(gasParticleDensityMap[index], electronDensityMap[index], positronDensityMap[index], protonDensityMap[index], antiProtonDensityMap[index], neutronDensityMap[index], antiNeutronDensityMap[index]);
    plasmaParticleDensityMap[index] = ProcessPlasmaParticleDensity(plasmaParticleDensityMap[index], electronDensityMap[index], positronDensityMap[index], protonDensityMap[index], antiProtonDensityMap[index], neutronDensityMap[index], antiNeutronDensityMap[index]);
}
