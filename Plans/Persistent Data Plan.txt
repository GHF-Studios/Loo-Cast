*DONE* 		TODO: Implement proper Type Serialization (SerializableType class maybe?)
*DONE* 		TODO: Change IRuntimeDataSerializer & IRuntimeDataDeserializer Getter and Setter Methods to Property Setter and Getter
*DONE* 		TODO: Implement Basic Test, if Player serializes correctly
*90% DONE* 	TODO: Implement High-level New/Save/Load/Delete/Rename Game logic
			TODO: Implement Chunk Sub-Class for Filament, Sector and Region
				Filaments, Sectors and Regions have 3 States they can logically be in: Persistently Saved, Statically Loaded, Dynamically Loaded
				Meaning: 
					Persistently Saved: The Filament/Sector/Region is persistently saved and not loaded into the runtime
					Statically Loaded: The Core Parameters are loaded into the runtime
					Dynamically Loaded: The Core Parameters are loaded into the runtime & The ObjectInstances of the Filament* are instantiated into the world and are loaded into their respective RuntimeSets
				Chunks are single Pixels of the Filament* Map, with different Values, like an Electron Density Map
				No actual map of Filament* saved, only Property which constructs it from already generated chunks and their values, like an Electron Density Map
				Universe API: Add Methods: IsFilamentChunkGenerated, IsSectorChunkGenerated, IsRegionChunkGenerated, GenerateFilamentChunk, GenerateSectorChunk, GenerateRegionChunk
				Universe has the following Maps	
					Density: Quark, Anti-Quark, Gluon, Anti-Gluon, Dark Matter, Dark Energy
				Filament has the following Maps		
					Density: 					Electron, Positron, Proton, Anti-Proton, Neutron, Anti-Neutron
					Continuous Phenomena:		
				Sector has the following Maps		
					Density: 					Solid Particle, Liquid particle, Gas Particle, Plasma Particle
					Continuous Phenomena:		
				Region has the following Maps
					Denisty:					Matter, Anti-Matter, 
					Continuous Phenomena:			
			TODO: Implement UniverseObserver
				If any chunks are outside the unload distance, unload them
				If any chunks are within th load distance, load or generate them
			TODO: Remove MainManager.LoadScene and use specific Methods like CreateNewGame, LoadGame, ExitToMainMenu, ExitToDesktop
			TODO: Prettify jsonSerializedData string (Maybe through custom serialization/deserialization?)
			TODO: For all ExtendeMonoBehaviour-inherited classes: 
			Add RequireComponent-Attribute to Main Components, referencing the corresponding Components
			Implement IRuntimeDataSerializer, IRuntimeDataDeserializer, IIdentifierProvider and IInstanceIdentifierProvider wherever needed, including a DataContainer struct
			One Prefab must contain exactly one IInstanceIdentifierProvider, exactly one IRuntimeDataSerializer and exactly one IRuntimeDataDeserializer
			Example: Player, PlayerHealth (Both need actual implementation, currently only implemented for a single variable for demonstration purposes!)
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
Universe Generation Settings Code:

/*
            Universe.GenerationSettings generationSettings = new Universe.GenerationSettings();

            #region Universe Generation Settings Default
            generationSettings.Seed = 0;
            generationSettings.Size = 2048;
            generationSettings.MapFromMin = -1.0f;
            generationSettings.MapFromMax = 1.0f;
            generationSettings.MapToMin = 0.0f;
            generationSettings.MapToMax = 1.0f;
            generationSettings.Power = 5.0f;
            generationSettings.Amplitude = 64.0f;

            generationSettings.NoiseType = FastNoiseLite.NoiseType.Cellular;
            generationSettings.Frequency = 0.04f;

            generationSettings.FractalType = FastNoiseLite.FractalType.FBm;
            generationSettings.FractalOctaves = 3;
            generationSettings.FractalLacunarity = 2.0f;
            generationSettings.FractalGain = 0.5f;
            generationSettings.FractalWeightedStrength = 1.0f;

            generationSettings.CellularDistanceFunction = FastNoiseLite.CellularDistanceFunction.EuclideanSq;
            generationSettings.CellularReturnType = FastNoiseLite.CellularReturnType.Distance;
            generationSettings.CellularJitter = 1.0f;

            generationSettings.DomainWarpType = FastNoiseLite.DomainWarpType.OpenSimplex2;
            generationSettings.DomainWarpAmplitude = 20.0f;
            generationSettings.DomainWarpFrequency = 0.01f;

            generationSettings.DomainWarpFractalType = FastNoiseLite.FractalType.DomainWarpProgressive;
            generationSettings.DomainWarpFractalOctaves = 5;
            generationSettings.DomainWarpFractalLacunarity = 2.0f;
            generationSettings.DomainWarpFractalGain = 0.5f;
            #endregion

            #region Filament Generation Settings Default
            generationSettings.FilamentGenerationSettings.Size = 2048;
            generationSettings.FilamentGenerationSettings.MapFromMin = -1.0f;
            generationSettings.FilamentGenerationSettings.MapFromMax = 1.0f;
            generationSettings.FilamentGenerationSettings.MapToMin = 0.0f;
            generationSettings.FilamentGenerationSettings.MapToMax = 1.0f;
            generationSettings.FilamentGenerationSettings.UniverseNoiseInfluence = 1.0f;
            generationSettings.FilamentGenerationSettings.Power = 1.0f;
            generationSettings.FilamentGenerationSettings.Amplitude = 1.0f;

            generationSettings.FilamentGenerationSettings.NoiseType = FastNoiseLite.NoiseType.Cellular;
            generationSettings.FilamentGenerationSettings.Frequency = 0.02f;

            generationSettings.FilamentGenerationSettings.FractalType = FastNoiseLite.FractalType.FBm;
            generationSettings.FilamentGenerationSettings.FractalOctaves = 5;
            generationSettings.FilamentGenerationSettings.FractalLacunarity = 2.0f;
            generationSettings.FilamentGenerationSettings.FractalGain = 0.5f;
            generationSettings.FilamentGenerationSettings.FractalWeightedStrength = 0.0f;

            generationSettings.FilamentGenerationSettings.CellularDistanceFunction = FastNoiseLite.CellularDistanceFunction.EuclideanSq;
            generationSettings.FilamentGenerationSettings.CellularReturnType = FastNoiseLite.CellularReturnType.Distance;
            generationSettings.FilamentGenerationSettings.CellularJitter = 1.0f;

            generationSettings.FilamentGenerationSettings.DomainWarpType = FastNoiseLite.DomainWarpType.OpenSimplex2;
            generationSettings.FilamentGenerationSettings.DomainWarpAmplitude = 20.0f;
            generationSettings.FilamentGenerationSettings.DomainWarpFrequency = 0.005f;

            generationSettings.FilamentGenerationSettings.DomainWarpFractalType = FastNoiseLite.FractalType.DomainWarpProgressive;
            generationSettings.FilamentGenerationSettings.DomainWarpFractalOctaves = 5;
            generationSettings.FilamentGenerationSettings.DomainWarpFractalLacunarity = 2.0f;
            generationSettings.FilamentGenerationSettings.DomainWarpFractalGain = 0.5f;
            #endregion

            #region Sectror Generation Settings Default
            generationSettings.SectorGenerationSettings.Size = 2048;
            generationSettings.SectorGenerationSettings.MapFromMin = -1.0f;
            generationSettings.SectorGenerationSettings.MapFromMax = 1.0f;
            generationSettings.SectorGenerationSettings.MapToMin = 0.0f;
            generationSettings.SectorGenerationSettings.MapToMax = 1.0f;
            generationSettings.SectorGenerationSettings.FilamentNoiseInfluence = 1.0f;
            generationSettings.SectorGenerationSettings.Power = 1.0f;
            generationSettings.SectorGenerationSettings.Amplitude = 1.0f;

            generationSettings.SectorGenerationSettings.NoiseType = FastNoiseLite.NoiseType.OpenSimplex2;
            generationSettings.SectorGenerationSettings.Frequency = 0.01f;

            generationSettings.SectorGenerationSettings.FractalType = FastNoiseLite.FractalType.FBm;
            generationSettings.SectorGenerationSettings.FractalOctaves = 5;
            generationSettings.SectorGenerationSettings.FractalLacunarity = 2.0f;
            generationSettings.SectorGenerationSettings.FractalGain = 0.5f;
            generationSettings.SectorGenerationSettings.FractalWeightedStrength = 0.0f;

            generationSettings.SectorGenerationSettings.DomainWarpType = FastNoiseLite.DomainWarpType.OpenSimplex2;
            generationSettings.SectorGenerationSettings.DomainWarpAmplitude = 20.0f;
            generationSettings.SectorGenerationSettings.DomainWarpFrequency = 0.005f;

            generationSettings.SectorGenerationSettings.DomainWarpFractalType = FastNoiseLite.FractalType.DomainWarpProgressive;
            generationSettings.SectorGenerationSettings.DomainWarpFractalOctaves = 5;
            generationSettings.SectorGenerationSettings.DomainWarpFractalLacunarity = 2.0f;
            generationSettings.SectorGenerationSettings.DomainWarpFractalGain = 0.5f;
            #endregion

            #region Region Generation Settings Default
            generationSettings.RegionGenerationSettings.Size = 2048;
            generationSettings.RegionGenerationSettings.MapFromMin = -1.0f;
            generationSettings.RegionGenerationSettings.MapFromMax = 1.0f;
            generationSettings.RegionGenerationSettings.MapToMin = -0.375f;
            generationSettings.RegionGenerationSettings.MapToMax = 1.375f;
            generationSettings.RegionGenerationSettings.SectorNoiseInfluence = 1.0f;
            generationSettings.RegionGenerationSettings.Power = 1.0f;
            generationSettings.RegionGenerationSettings.Amplitude = 1.0f;

            generationSettings.RegionGenerationSettings.NoiseType = FastNoiseLite.NoiseType.OpenSimplex2;
            generationSettings.RegionGenerationSettings.Frequency = 0.005f;

            generationSettings.RegionGenerationSettings.FractalType = FastNoiseLite.FractalType.FBm;
            generationSettings.RegionGenerationSettings.FractalOctaves = 5;
            generationSettings.RegionGenerationSettings.FractalLacunarity = 2.0f;
            generationSettings.RegionGenerationSettings.FractalGain = 0.5f;
            generationSettings.RegionGenerationSettings.FractalWeightedStrength = 0.0f;

            generationSettings.RegionGenerationSettings.DomainWarpType = FastNoiseLite.DomainWarpType.OpenSimplex2;
            generationSettings.RegionGenerationSettings.DomainWarpAmplitude = 20.0f;
            generationSettings.RegionGenerationSettings.DomainWarpFrequency = 0.005f;

            generationSettings.RegionGenerationSettings.DomainWarpFractalType = FastNoiseLite.FractalType.DomainWarpProgressive;
            generationSettings.RegionGenerationSettings.DomainWarpFractalOctaves = 5;
            generationSettings.RegionGenerationSettings.DomainWarpFractalLacunarity = 2.0f;
            generationSettings.RegionGenerationSettings.DomainWarpFractalGain = 0.5f;
            #endregion

            Vector2Int filamentPosition = new Vector2Int(1024, 1024);
            Vector2Int sectorPosition = new Vector2Int(1024, 1024);
            Vector2Int regionPosition = new Vector2Int(1024, 1024);
            Universe.GenerateUniverse(generationSettings);
            Universe.Instance.GenerateFilament(filamentPosition);
            Universe.Instance.GenerateSector(filamentPosition, sectorPosition);
            Universe.Instance.GenerateRegion(sectorPosition, regionPosition);
            */