#pragma kernel CSMain

struct SectorGenerationSettings
{
    int ChunkSize;
    float MapFromMin;
    float MapFromMax;
    float MapToMin;
    float MapToMax;
    float FilamentNoiseInfluence;
    float Power;
    float Amplitude;
};

struct DensityData
{
    int XPosition;
    int YPosition;
    float Value;
};

RWStructuredBuffer<SectorGenerationSettings> sectorGenerationSettingsBuffer;
RWStructuredBuffer<DensityData> electronDensityMap;
RWStructuredBuffer<DensityData> positronDensityMap;
RWStructuredBuffer<DensityData> protonDensityMap;
RWStructuredBuffer<DensityData> antiProtonDensityMap;
RWStructuredBuffer<DensityData> neutronDensityMap;
RWStructuredBuffer<DensityData> antiNeutronDensityMap;
RWStructuredBuffer<DensityData> solidParticleDensityMap;
RWStructuredBuffer<DensityData> liquidParticleDensityMap;
RWStructuredBuffer<DensityData> gasParticleDensityMap;
RWStructuredBuffer<DensityData> plasmaParticleDensityMap;

float Map(float value, float fromMin, float fromMax, float toMin, float toMax)
{
    return (value - fromMin) / (fromMax - fromMin) * (toMax - toMin) + toMin;
}

DensityData ProcessSolidParticleDensity(DensityData solidParticleDensity, DensityData electronDensity, DensityData positronDensity, DensityData protonDensity, DensityData antiProtonDensity, DensityData neutronDensity, DensityData antiNeutronDensity)
{
    solidParticleDensity.Value = Map(solidParticleDensity.Value, sectorGenerationSettingsBuffer[0].MapFromMin, sectorGenerationSettingsBuffer[0].MapFromMax, sectorGenerationSettingsBuffer[0].MapToMin, sectorGenerationSettingsBuffer[0].MapToMax);
    solidParticleDensity.Value = pow(solidParticleDensity.Value, sectorGenerationSettingsBuffer[0].Power);
    solidParticleDensity.Value = solidParticleDensity.Value * sectorGenerationSettingsBuffer[0].Amplitude;
    
    // TODO: Implement actual algorithm
    solidParticleDensity.Value = solidParticleDensity.Value * (1 + (sectorGenerationSettingsBuffer[0].FilamentNoiseInfluence * electronDensity.Value));
    return solidParticleDensity;
}

DensityData ProcessLiquidParticleDensity(DensityData liquidParticleDensity, DensityData electronDensity, DensityData positronDensity, DensityData protonDensity, DensityData antiProtonDensity, DensityData neutronDensity, DensityData antiNeutronDensity)
{
    liquidParticleDensity.Value = Map(liquidParticleDensity.Value, sectorGenerationSettingsBuffer[0].MapFromMin, sectorGenerationSettingsBuffer[0].MapFromMax, sectorGenerationSettingsBuffer[0].MapToMin, sectorGenerationSettingsBuffer[0].MapToMax);
    liquidParticleDensity.Value = pow(liquidParticleDensity.Value, sectorGenerationSettingsBuffer[0].Power);
    liquidParticleDensity.Value = liquidParticleDensity.Value * sectorGenerationSettingsBuffer[0].Amplitude;
    
    // TODO: Implement actual algorithm
    liquidParticleDensity.Value = liquidParticleDensity.Value * (1 + (sectorGenerationSettingsBuffer[0].FilamentNoiseInfluence * electronDensity.Value));
    return liquidParticleDensity;
}

DensityData ProcessGasParticleDensity(DensityData gasParticleDensity, DensityData electronDensity, DensityData positronDensity, DensityData protonDensity, DensityData antiProtonDensity, DensityData neutronDensity, DensityData antiNeutronDensity)
{
    gasParticleDensity.Value = Map(gasParticleDensity.Value, sectorGenerationSettingsBuffer[0].MapFromMin, sectorGenerationSettingsBuffer[0].MapFromMax, sectorGenerationSettingsBuffer[0].MapToMin, sectorGenerationSettingsBuffer[0].MapToMax);
    gasParticleDensity.Value = pow(gasParticleDensity.Value, sectorGenerationSettingsBuffer[0].Power);
    gasParticleDensity.Value = gasParticleDensity.Value * sectorGenerationSettingsBuffer[0].Amplitude;
    
    // TODO: Implement actual algorithm
    gasParticleDensity.Value = gasParticleDensity.Value * (1 + (sectorGenerationSettingsBuffer[0].FilamentNoiseInfluence * electronDensity.Value));
    return gasParticleDensity;
}

DensityData ProcessPlasmaParticleDensity(DensityData plasmaParticleDensity, DensityData electronDensity, DensityData positronDensity, DensityData protonDensity, DensityData antiProtonDensity, DensityData neutronDensity, DensityData antiNeutronDensity)
{
    plasmaParticleDensity.Value = Map(plasmaParticleDensity.Value, sectorGenerationSettingsBuffer[0].MapFromMin, sectorGenerationSettingsBuffer[0].MapFromMax, sectorGenerationSettingsBuffer[0].MapToMin, sectorGenerationSettingsBuffer[0].MapToMax);
    plasmaParticleDensity.Value = pow(plasmaParticleDensity.Value, sectorGenerationSettingsBuffer[0].Power);
    plasmaParticleDensity.Value = plasmaParticleDensity.Value * sectorGenerationSettingsBuffer[0].Amplitude;
    
    // TODO: Implement actual algorithm
    plasmaParticleDensity.Value = plasmaParticleDensity.Value * (1 + (sectorGenerationSettingsBuffer[0].FilamentNoiseInfluence * electronDensity.Value));
    return plasmaParticleDensity;
}

[numthreads(16,16,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int x = id.x;
    int y = id.y;
    int index = y * sectorGenerationSettingsBuffer[0].ChunkSize + x;
    solidParticleDensityMap[index] = ProcessSolidParticleDensity(solidParticleDensityMap[index], electronDensityMap[index], positronDensityMap[index], protonDensityMap[index], antiProtonDensityMap[index], neutronDensityMap[index], antiNeutronDensityMap[index]);
    liquidParticleDensityMap[index] = ProcessLiquidParticleDensity(liquidParticleDensityMap[index], electronDensityMap[index], positronDensityMap[index], protonDensityMap[index], antiProtonDensityMap[index], neutronDensityMap[index], antiNeutronDensityMap[index]);
    gasParticleDensityMap[index] = ProcessGasParticleDensity(gasParticleDensityMap[index], electronDensityMap[index], positronDensityMap[index], protonDensityMap[index], antiProtonDensityMap[index], neutronDensityMap[index], antiNeutronDensityMap[index]);
    plasmaParticleDensityMap[index] = ProcessPlasmaParticleDensity(plasmaParticleDensityMap[index], electronDensityMap[index], positronDensityMap[index], protonDensityMap[index], antiProtonDensityMap[index], neutronDensityMap[index], antiNeutronDensityMap[index]);
}
