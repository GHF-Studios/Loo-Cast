#pragma kernel CSMain

struct SectorGenerationSettings
{
    int ChunkSize;
    float MapFromMin;
    float MapFromMax;
    float MapToMin;
    float MapToMax;
    float FilamentNoiseInfluence;
    float Power;
    float Amplitude;
};

SectorGenerationSettings sectorGenerationSettings;

RWStructuredBuffer<float> electronDensityMap;
RWStructuredBuffer<float> positronDensityMap;
RWStructuredBuffer<float> protonDensityMap;
RWStructuredBuffer<float> antiProtonDensityMap;
RWStructuredBuffer<float> neutronDensityMap;
RWStructuredBuffer<float> antiNeutronDensityMap;

RWStructuredBuffer<float> solidParticleDensityMap;
RWStructuredBuffer<float> liquidParticleDensityMap;
RWStructuredBuffer<float> gasParticleDensityMap;
RWStructuredBuffer<float> plasmaParticleDensityMap;

float Map(float value, float fromMin, float fromMax, float toMin, float toMax)
{
    return (value - fromMin) / (fromMax - fromMin) * (toMax - toMin) + toMin;
}

float ProcessSolidParticleDensity(float solidParticleDensity, float electronDensity, float positronDensity, float protonDensity, float antiProtonDensity, float neutronDensity, float antiNeutronDensity)
{
    solidParticleDensity = Map(solidParticleDensity, sectorGenerationSettings.MapFromMin, sectorGenerationSettings.MapFromMax, sectorGenerationSettings.MapToMin, sectorGenerationSettings.MapToMax);
    solidParticleDensity = pow(solidParticleDensity, sectorGenerationSettings.Power);
    solidParticleDensity = solidParticleDensity * sectorGenerationSettings.Amplitude;
    
    // TODO: Implement actual algorithm
    solidParticleDensity = solidParticleDensity * (1 + (sectorGenerationSettings.FilamentNoiseInfluence * electronDensity));
    return solidParticleDensity;
}

float ProcessLiquidParticleDensity(float liquidParticleDensity, float electronDensity, float positronDensity, float protonDensity, float antiProtonDensity, float neutronDensity, float antiNeutronDensity)
{
    liquidParticleDensity = Map(liquidParticleDensity, sectorGenerationSettings.MapFromMin, sectorGenerationSettings.MapFromMax, sectorGenerationSettings.MapToMin, sectorGenerationSettings.MapToMax);
    liquidParticleDensity = pow(liquidParticleDensity, sectorGenerationSettings.Power);
    liquidParticleDensity = liquidParticleDensity * sectorGenerationSettings.Amplitude;
    
    // TODO: Implement actual algorithm
    liquidParticleDensity = liquidParticleDensity * (1 + (sectorGenerationSettings.FilamentNoiseInfluence * electronDensity));
    return liquidParticleDensity;
}

float ProcessGasParticleDensity(float gasParticleDensity, float electronDensity, float positronDensity, float protonDensity, float antiProtonDensity, float neutronDensity, float antiNeutronDensity)
{
    gasParticleDensity = Map(gasParticleDensity, sectorGenerationSettings.MapFromMin, sectorGenerationSettings.MapFromMax, sectorGenerationSettings.MapToMin, sectorGenerationSettings.MapToMax);
    gasParticleDensity = pow(gasParticleDensity, sectorGenerationSettings.Power);
    gasParticleDensity = gasParticleDensity * sectorGenerationSettings.Amplitude;
    
    // TODO: Implement actual algorithm
    gasParticleDensity = gasParticleDensity * (1 + (sectorGenerationSettings.FilamentNoiseInfluence * electronDensity));
    return gasParticleDensity;
}

float ProcessPlasmaParticleDensity(float plasmaParticleDensity, float electronDensity, float positronDensity, float protonDensity, float antiProtonDensity, float neutronDensity, float antiNeutronDensity)
{
    plasmaParticleDensity = Map(plasmaParticleDensity, sectorGenerationSettings.MapFromMin, sectorGenerationSettings.MapFromMax, sectorGenerationSettings.MapToMin, sectorGenerationSettings.MapToMax);
    plasmaParticleDensity = pow(plasmaParticleDensity, sectorGenerationSettings.Power);
    plasmaParticleDensity = plasmaParticleDensity * sectorGenerationSettings.Amplitude;
    
    // TODO: Implement actual algorithm
    plasmaParticleDensity = plasmaParticleDensity * (1 + (sectorGenerationSettings.FilamentNoiseInfluence * electronDensity));
    return plasmaParticleDensity;
}

[numthreads(32,32,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int x = id.x;
    int y = id.y;
    int index = y * sectorGenerationSettings.ChunkSize + x;
    solidParticleDensityMap[index] = ProcessSolidParticleDensity(solidParticleDensityMap[index], electronDensityMap[index], positronDensityMap[index], protonDensityMap[index], antiProtonDensityMap[index], neutronDensityMap[index], antiNeutronDensityMap[index]);
    liquidParticleDensityMap[index] = ProcessLiquidParticleDensity(liquidParticleDensityMap[index], electronDensityMap[index], positronDensityMap[index], protonDensityMap[index], antiProtonDensityMap[index], neutronDensityMap[index], antiNeutronDensityMap[index]);
    gasParticleDensityMap[index] = ProcessGasParticleDensity(gasParticleDensityMap[index], electronDensityMap[index], positronDensityMap[index], protonDensityMap[index], antiProtonDensityMap[index], neutronDensityMap[index], antiNeutronDensityMap[index]);
    plasmaParticleDensityMap[index] = ProcessPlasmaParticleDensity(plasmaParticleDensityMap[index], electronDensityMap[index], positronDensityMap[index], protonDensityMap[index], antiProtonDensityMap[index], neutronDensityMap[index], antiNeutronDensityMap[index]);
}
