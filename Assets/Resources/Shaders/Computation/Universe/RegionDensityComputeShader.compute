#pragma kernel CSMain

struct RegionGenerationSettings
{
    int ChunkSize;
    float MapFromMin;
    float MapFromMax;
    float MapToMin;
    float MapToMax;
    float SectorNoiseInfluence;
    float Power;
    float Amplitude;
};

struct DensityData
{
    int XPosition;
    int YPosition;
    float Value;
};

RWStructuredBuffer<RegionGenerationSettings> regionGenerationSettingsBuffer;
RWStructuredBuffer<DensityData> solidParticleDensityMap;
RWStructuredBuffer<DensityData> liquidParticleDensityMap;
RWStructuredBuffer<DensityData> gasParticleDensityMap;
RWStructuredBuffer<DensityData> plasmaParticleDensityMap;
RWStructuredBuffer<DensityData> matterParticleDensityMap;
RWStructuredBuffer<DensityData> antiMatterParticleDensityMap;

float Map(float value, float fromMin, float fromMax, float toMin, float toMax)
{
    return (value - fromMin) / (fromMax - fromMin) * (toMax - toMin) + toMin;
}

DensityData ProcessMatterDensity(DensityData matterDensity, DensityData solidParticleDensity, DensityData liquidParticleDensity, DensityData gasParticleDensity, DensityData plasmaParticleDensity)
{
    matterDensity.Value = Map(matterDensity.Value, regionGenerationSettingsBuffer[0].MapFromMin, regionGenerationSettingsBuffer[0].MapFromMax, regionGenerationSettingsBuffer[0].MapToMin, regionGenerationSettingsBuffer[0].MapToMax);
    matterDensity.Value = pow(matterDensity.Value, regionGenerationSettingsBuffer[0].Power);
    matterDensity.Value = matterDensity.Value * regionGenerationSettingsBuffer[0].Amplitude;

    // TODO: Implement actual algorithm
    matterDensity.Value = matterDensity.Value * (1 + (regionGenerationSettingsBuffer[0].SectorNoiseInfluence * solidParticleDensity.Value));
    return matterDensity;
}

DensityData ProcessAntiMatterDensity(DensityData antiMatterDensity, DensityData solidParticleDensity, DensityData liquidParticleDensity, DensityData gasParticleDensity, DensityData plasmaParticleDensity)
{
    antiMatterDensity.Value = Map(antiMatterDensity.Value, regionGenerationSettingsBuffer[0].MapFromMin, regionGenerationSettingsBuffer[0].MapFromMax, regionGenerationSettingsBuffer[0].MapToMin, regionGenerationSettingsBuffer[0].MapToMax);
    antiMatterDensity.Value = pow(antiMatterDensity.Value, regionGenerationSettingsBuffer[0].Power);
    antiMatterDensity.Value = antiMatterDensity.Value * regionGenerationSettingsBuffer[0].Amplitude;
    
    // TODO: Implement actual algorithm
    antiMatterDensity.Value = antiMatterDensity.Value * (1 + (regionGenerationSettingsBuffer[0].SectorNoiseInfluence * solidParticleDensity.Value));
    return antiMatterDensity;
}

[numthreads(32,32,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int x = id.x;
    int y = id.y;
    int index = y * regionGenerationSettingsBuffer[0].ChunkSize + x;
    matterParticleDensityMap[index] = ProcessMatterDensity(matterParticleDensityMap[index], solidParticleDensityMap[index], liquidParticleDensityMap[index], gasParticleDensityMap[index], plasmaParticleDensityMap[index]);
    antiMatterParticleDensityMap[index] = ProcessAntiMatterDensity(antiMatterParticleDensityMap[index], solidParticleDensityMap[index], liquidParticleDensityMap[index], gasParticleDensityMap[index], plasmaParticleDensityMap[index]);
}
