#pragma kernel CSMain

struct RegionGenerationSettings
{
    int ChunkSize;
    float MapFromMin;
    float MapFromMax;
    float MapToMin;
    float MapToMax;
    float SectorNoiseInfluence;
    float Power;
    float Amplitude;
};

struct DensityData
{
    int XPosition;
    int YPosition;
    float Value;
};

RWStructuredBuffer<RegionGenerationSettings> regionGenerationSettingsBuffer;
RWStructuredBuffer<DensityData> solidParticleDensityMap;
RWStructuredBuffer<DensityData> liquidParticleDensityMap;
RWStructuredBuffer<DensityData> gasParticleDensityMap;
RWStructuredBuffer<DensityData> plasmaParticleDensityMap;
RWStructuredBuffer<DensityData> matterParticleDensityMap;
RWStructuredBuffer<DensityData> antiMatterParticleDensityMap;

uint rng_state;

float map(float value, float fromMin, float fromMax, float toMin, float toMax)
{
    return (value - fromMin) / (fromMax - fromMin) * (toMax - toMin) + toMin;
}

float inverseLerp(float a, float b, float v)
{
    return (v - a) / (b - a);
}

float hash(float n )
{
    return frac(sin(n)*43758.5453);
}

uint rand_xorshift()
{
    // Xorshift algorithm from George Marsaglia's paper
    rng_state ^= (rng_state << 13);
    rng_state ^= (rng_state >> 17);
    rng_state ^= (rng_state << 5);
    return rng_state;
}

float sampleRandomNormalized(uint seed)
{
    rng_state = seed;
    return float(rand_xorshift()) * (1.0 / 4294967296.0);
}

float sampleRandomInRange(uint seed, float min, float max)
{
    return map(sampleRandomNormalized(seed), 0.0f, 1.0f, min, max);
}

float sampleRawNoise(float3 x)
{
    // The noise function returns a value in the range -1.0f -> 1.0f

    float3 p = floor(x);
    float3 f = frac(x);

    f       = f*f*(3.0-2.0*f);
    float n = p.x + p.y*57.0 + 113.0*p.z;

    return lerp(lerp(lerp( hash(n+0.0), hash(n+1.0),f.x),
                   lerp( hash(n+57.0), hash(n+58.0),f.x),f.y),
               lerp(lerp( hash(n+113.0), hash(n+114.0),f.x),
                   lerp( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);
}

float sampleNoise(float x, float y, uint seed, float scale, int octaves, float persistence, float lacunarity, float amplitude, float2 offset)
{
    float2 octaveOffsets[octaves];
    for (int i = 0; i < octaves; i++)
    {
        float octaveOffsetX = sampleRandomInRange(seed, -100000, 100000);
        seed++;
        float octaveOffsetY = sampleRandomInRange(seed, -100000, 1000000);
        seed++;
        octaveOffsets[i] = float2(octaveOffsetX, octaveOffsetY);
    }

    if (scale <= 0)
    {
        scale = 0.0001f;
    }

    float halfSize = regionGenerationSettingsBuffer[0].ChunkSize / 2.0f;
    float sampleAmplitude = 1.0f;
    float sampleFrequency = 1.0f;
    float noiseHeight = 0.0f;

    for (int j = 0; j < octaves; j++)
    {
        float sampleX = ((x - halfSize + octaveOffsets[i].x) / scale) * sampleFrequency;
        float sampleY = ((y - halfSize + octaveOffsets[i].y) / scale) * sampleFrequency;
        float sampleZ = sampleRandomInRange(seed, -100000, 100000);
        seed++;

        noiseHeight += sampleRawNoise(float3(sampleX, sampleY, sampleZ)) * sampleAmplitude;

        sampleAmplitude *= persistence;
        sampleFrequency *= lacunarity;
    }

    float maxNoiseAmplitude = 0.0f;
    float noiseAmplitude = 1.0f;
    for (int k = 0; k < octaves; k++)
    {
        maxNoiseAmplitude += noiseAmplitude;
        noiseAmplitude *= persistence;
    }
    
    maxNoiseAmplitude *= 1 / amplitude;
    noiseHeight = inverseLerp(-maxNoiseAmplitude, maxNoiseAmplitude, noiseHeight);
    return noiseHeight;
}

DensityData SampleMatterDensity(DensityData matterDensity, uint seed, float scale, int octaves, float persistence, float lacunarity, float amplitude, float2 offset)
{
    matterDensity.Value = sampleNoise(matterDensity.XPosition, matterDensity.YPosition, seed, scale, octaves, persistence, lacunarity, amplitude, offset);
    return matterDensity;
}

DensityData SampleAntiMatterDensity(DensityData antiMatterDensity, uint seed, float scale, int octaves, float persistence, float lacunarity, float amplitude, float2 offset)
{
    antiMatterDensity.Value = sampleNoise(antiMatterDensity.XPosition, antiMatterDensity.YPosition, seed, scale, octaves, persistence, lacunarity, amplitude, offset);
    return antiMatterDensity;
}

DensityData ProcessMatterDensity(DensityData matterDensity, DensityData solidParticleDensity, DensityData liquidParticleDensity, DensityData gasParticleDensity, DensityData plasmaParticleDensity)
{
    matterDensity.Value = map(matterDensity.Value, regionGenerationSettingsBuffer[0].MapFromMin, regionGenerationSettingsBuffer[0].MapFromMax, regionGenerationSettingsBuffer[0].MapToMin, regionGenerationSettingsBuffer[0].MapToMax);
    matterDensity.Value = pow(matterDensity.Value, regionGenerationSettingsBuffer[0].Power);
    matterDensity.Value = matterDensity.Value * regionGenerationSettingsBuffer[0].Amplitude;

    // TODO: Implement actual algorithm
    matterDensity.Value = matterDensity.Value * (1 + (regionGenerationSettingsBuffer[0].SectorNoiseInfluence * solidParticleDensity.Value));
    return matterDensity;
}

DensityData ProcessAntiMatterDensity(DensityData antiMatterDensity, DensityData solidParticleDensity, DensityData liquidParticleDensity, DensityData gasParticleDensity, DensityData plasmaParticleDensity)
{
    antiMatterDensity.Value = map(antiMatterDensity.Value, regionGenerationSettingsBuffer[0].MapFromMin, regionGenerationSettingsBuffer[0].MapFromMax, regionGenerationSettingsBuffer[0].MapToMin, regionGenerationSettingsBuffer[0].MapToMax);
    antiMatterDensity.Value = pow(antiMatterDensity.Value, regionGenerationSettingsBuffer[0].Power);
    antiMatterDensity.Value = antiMatterDensity.Value * regionGenerationSettingsBuffer[0].Amplitude;
    
    // TODO: Implement actual algorithm
    antiMatterDensity.Value = antiMatterDensity.Value * (1 + (regionGenerationSettingsBuffer[0].SectorNoiseInfluence * solidParticleDensity.Value));
    return antiMatterDensity;
}

[numthreads(16,16,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int x = id.x;
    int y = id.y;
    int index = y * regionGenerationSettingsBuffer[0].ChunkSize + x;
    uint threadID = id.y * regionGenerationSettingsBuffer[0].ChunkSize + id.x;
    matterParticleDensityMap[index] = SampleMatterDensity(matterParticleDensityMap[index], threadID, );
    antiMatterParticleDensityMap[index] = SampleAntiMatterDensity(antiMatterParticleDensityMap[index], threadID, );
    matterParticleDensityMap[index] = ProcessMatterDensity(matterParticleDensityMap[index], solidParticleDensityMap[index], liquidParticleDensityMap[index], gasParticleDensityMap[index], plasmaParticleDensityMap[index]);
    antiMatterParticleDensityMap[index] = ProcessAntiMatterDensity(antiMatterParticleDensityMap[index], solidParticleDensityMap[index], liquidParticleDensityMap[index], gasParticleDensityMap[index], plasmaParticleDensityMap[index]);
}
