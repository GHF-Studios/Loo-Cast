#pragma kernel CSMain

struct FilamentGenerationSettings
{
    int ChunkSize;
    float MapFromMin;
    float MapFromMax;
    float MapToMin;
    float MapToMax;
    float UniverseNoiseInfluence;
    float Power;
    float Amplitude;
};

struct DensityData
{
    int XPosition;
    int YPosition;
    float Value;
};

RWStructuredBuffer<FilamentGenerationSettings> filamentGenerationSettingsBuffer;
RWStructuredBuffer<DensityData> universeDensityMap;
RWStructuredBuffer<DensityData> electronDensityMap;
RWStructuredBuffer<DensityData> positronDensityMap;
RWStructuredBuffer<DensityData> protonDensityMap;
RWStructuredBuffer<DensityData> antiProtonDensityMap;
RWStructuredBuffer<DensityData> neutronDensityMap;
RWStructuredBuffer<DensityData> antiNeutronDensityMap;

float Map(float value, float fromMin, float fromMax, float toMin, float toMax)
{
    return (value - fromMin) / (fromMax - fromMin) * (toMax - toMin) + toMin;
}

DensityData ProcessElectronDensity(DensityData electronDensity, DensityData universeDensity)
{
    electronDensity.Value = Map(electronDensity.Value, filamentGenerationSettingsBuffer[0].MapFromMin, filamentGenerationSettingsBuffer[0].MapFromMax, filamentGenerationSettingsBuffer[0].MapToMin, filamentGenerationSettingsBuffer[0].MapToMax);
    electronDensity.Value = pow(electronDensity.Value, filamentGenerationSettingsBuffer[0].Power);
    electronDensity.Value = electronDensity.Value * filamentGenerationSettingsBuffer[0].Amplitude;
    
    // TODO: Implement actual algorithm
    electronDensity.Value = electronDensity.Value * (1 + (filamentGenerationSettingsBuffer[0].UniverseNoiseInfluence * universeDensity.Value));
    return electronDensity;
}

DensityData ProcessPositronDensity(DensityData positronDensity, DensityData universeDensity)
{
    positronDensity.Value = Map(positronDensity.Value, filamentGenerationSettingsBuffer[0].MapFromMin, filamentGenerationSettingsBuffer[0].MapFromMax, filamentGenerationSettingsBuffer[0].MapToMin, filamentGenerationSettingsBuffer[0].MapToMax);
    positronDensity.Value = pow(positronDensity.Value, filamentGenerationSettingsBuffer[0].Power);
    positronDensity.Value = positronDensity.Value * filamentGenerationSettingsBuffer[0].Amplitude;
    
    // TODO: Implement actual algorithm
    positronDensity.Value = positronDensity.Value * (1 + (filamentGenerationSettingsBuffer[0].UniverseNoiseInfluence * universeDensity.Value));
    return positronDensity;
}

DensityData ProcessProtonDensity(DensityData protonDensity, DensityData universeDensity)
{
    protonDensity.Value = Map(protonDensity.Value, filamentGenerationSettingsBuffer[0].MapFromMin, filamentGenerationSettingsBuffer[0].MapFromMax, filamentGenerationSettingsBuffer[0].MapToMin, filamentGenerationSettingsBuffer[0].MapToMax);
    protonDensity.Value = pow(protonDensity.Value, filamentGenerationSettingsBuffer[0].Power);
    protonDensity.Value = protonDensity.Value * filamentGenerationSettingsBuffer[0].Amplitude;
    
    // TODO: Implement actual algorithm
    protonDensity.Value = protonDensity.Value * (1 + (filamentGenerationSettingsBuffer[0].UniverseNoiseInfluence * universeDensity.Value));
    return protonDensity;
}

DensityData ProcessAntiProtonDensity(DensityData antiProtonDensity, DensityData universeDensity)
{
    antiProtonDensity.Value = Map(antiProtonDensity.Value, filamentGenerationSettingsBuffer[0].MapFromMin, filamentGenerationSettingsBuffer[0].MapFromMax, filamentGenerationSettingsBuffer[0].MapToMin, filamentGenerationSettingsBuffer[0].MapToMax);
    antiProtonDensity.Value = pow(antiProtonDensity.Value, filamentGenerationSettingsBuffer[0].Power);
    antiProtonDensity.Value = antiProtonDensity.Value * filamentGenerationSettingsBuffer[0].Amplitude;
    
    // TODO: Implement actual algorithm
    antiProtonDensity.Value = antiProtonDensity.Value * (1 + (filamentGenerationSettingsBuffer[0].UniverseNoiseInfluence * universeDensity.Value));
    return antiProtonDensity;
}

DensityData ProcessNeutronDensity(DensityData neutronDensity, DensityData universeDensity)
{
    neutronDensity.Value = Map(neutronDensity.Value, filamentGenerationSettingsBuffer[0].MapFromMin, filamentGenerationSettingsBuffer[0].MapFromMax, filamentGenerationSettingsBuffer[0].MapToMin, filamentGenerationSettingsBuffer[0].MapToMax);
    neutronDensity.Value = pow(neutronDensity.Value, filamentGenerationSettingsBuffer[0].Power);
    neutronDensity.Value = neutronDensity.Value * filamentGenerationSettingsBuffer[0].Amplitude;
    
    // TODO: Implement actual algorithm
    neutronDensity.Value = neutronDensity.Value * (1 + (filamentGenerationSettingsBuffer[0].UniverseNoiseInfluence * universeDensity.Value));
    return neutronDensity;
}

DensityData ProcessAntiNeutronDensity(DensityData antiNeutronDensity, DensityData universeDensity)
{
    antiNeutronDensity.Value = Map(antiNeutronDensity.Value, filamentGenerationSettingsBuffer[0].MapFromMin, filamentGenerationSettingsBuffer[0].MapFromMax, filamentGenerationSettingsBuffer[0].MapToMin, filamentGenerationSettingsBuffer[0].MapToMax);
    antiNeutronDensity.Value = pow(antiNeutronDensity.Value, filamentGenerationSettingsBuffer[0].Power);
    antiNeutronDensity.Value = antiNeutronDensity.Value * filamentGenerationSettingsBuffer[0].Amplitude;
    
    // TODO: Implement actual algorithm
    antiNeutronDensity.Value = antiNeutronDensity.Value * (1 + (filamentGenerationSettingsBuffer[0].UniverseNoiseInfluence * universeDensity.Value));
    return antiNeutronDensity;
}

[numthreads(16,16,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int x = id.x;
    int y = id.y;
    int index = y * filamentGenerationSettingsBuffer[0].ChunkSize + x;
    electronDensityMap[index] = ProcessElectronDensity(electronDensityMap[index], universeDensityMap[index]);
    positronDensityMap[index] = ProcessPositronDensity(positronDensityMap[index], universeDensityMap[index]);
    protonDensityMap[index] = ProcessProtonDensity(protonDensityMap[index], universeDensityMap[index]);
    antiProtonDensityMap[index] = ProcessAntiProtonDensity(antiProtonDensityMap[index], universeDensityMap[index]);
    neutronDensityMap[index] = ProcessNeutronDensity(neutronDensityMap[index], universeDensityMap[index]);
    antiNeutronDensityMap[index] = ProcessAntiNeutronDensity(antiNeutronDensityMap[index], universeDensityMap[index]);
}
