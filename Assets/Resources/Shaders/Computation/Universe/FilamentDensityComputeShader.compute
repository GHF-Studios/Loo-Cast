#pragma kernel CSMain

struct FilamentGenerationSettings
{
    int ChunkSize;
    float MapFromMin;
    float MapFromMax;
    float MapToMin;
    float MapToMax;
    float UniverseNoiseInfluence;
    float Power;
    float Amplitude;
};

struct DensityData
{
    int XPosition;
    int YPosition;
    float Value;
};

RWStructuredBuffer<FilamentGenerationSettings> filamentGenerationSettingsBuffer;
RWStructuredBuffer<DensityData> universeDensityMap;
RWStructuredBuffer<DensityData> electronDensityMap;
RWStructuredBuffer<DensityData> positronDensityMap;
RWStructuredBuffer<DensityData> protonDensityMap;
RWStructuredBuffer<DensityData> antiProtonDensityMap;
RWStructuredBuffer<DensityData> neutronDensityMap;
RWStructuredBuffer<DensityData> antiNeutronDensityMap;

float Map(float value, float fromMin, float fromMax, float toMin, float toMax)
{
    return (value - fromMin) / (fromMax - fromMin) * (toMax - toMin) + toMin;
}

float ProcessElectronDensity(float electronDensity, float universeDensity)
{
    electronDensity = Map(electronDensity, filamentGenerationSettingsBuffer[0].MapFromMin, filamentGenerationSettingsBuffer[0].MapFromMax, filamentGenerationSettingsBuffer[0].MapToMin, filamentGenerationSettingsBuffer[0].MapToMax);
    electronDensity = pow(electronDensity, filamentGenerationSettingsBuffer[0].Power);
    electronDensity = electronDensity * filamentGenerationSettingsBuffer[0].Amplitude;
    
    // TODO: Implement actual algorithm
    electronDensity = electronDensity * (1 + (filamentGenerationSettingsBuffer[0].UniverseNoiseInfluence * universeDensity));
    return electronDensity;
}

float ProcessPositronDensity(float positronDensity, float universeDensity)
{
    positronDensity = Map(positronDensity, filamentGenerationSettingsBuffer[0].MapFromMin, filamentGenerationSettingsBuffer[0].MapFromMax, filamentGenerationSettingsBuffer[0].MapToMin, filamentGenerationSettingsBuffer[0].MapToMax);
    positronDensity = pow(positronDensity, filamentGenerationSettingsBuffer[0].Power);
    positronDensity = positronDensity * filamentGenerationSettingsBuffer[0].Amplitude;
    
    // TODO: Implement actual algorithm
    positronDensity = positronDensity * (1 + (filamentGenerationSettingsBuffer[0].UniverseNoiseInfluence * universeDensity));
    return positronDensity;
}

float ProcessProtonDensity(float protonDensity, float universeDensity)
{
    protonDensity = Map(protonDensity, filamentGenerationSettingsBuffer[0].MapFromMin, filamentGenerationSettingsBuffer[0].MapFromMax, filamentGenerationSettingsBuffer[0].MapToMin, filamentGenerationSettingsBuffer[0].MapToMax);
    protonDensity = pow(protonDensity, filamentGenerationSettingsBuffer[0].Power);
    protonDensity = protonDensity * filamentGenerationSettingsBuffer[0].Amplitude;
    
    // TODO: Implement actual algorithm
    protonDensity = protonDensity * (1 + (filamentGenerationSettingsBuffer[0].UniverseNoiseInfluence * universeDensity));
    return protonDensity;
}

float ProcessAntiProtonDensity(float antiProtonDensity, float universeDensity)
{
    antiProtonDensity = Map(antiProtonDensity, filamentGenerationSettingsBuffer[0].MapFromMin, filamentGenerationSettingsBuffer[0].MapFromMax, filamentGenerationSettingsBuffer[0].MapToMin, filamentGenerationSettingsBuffer[0].MapToMax);
    antiProtonDensity = pow(antiProtonDensity, filamentGenerationSettingsBuffer[0].Power);
    antiProtonDensity = antiProtonDensity * filamentGenerationSettingsBuffer[0].Amplitude;
    
    // TODO: Implement actual algorithm
    antiProtonDensity = antiProtonDensity * (1 + (filamentGenerationSettingsBuffer[0].UniverseNoiseInfluence * universeDensity));
    return antiProtonDensity;
}

float ProcessNeutronDensity(float neutronDensity, float universeDensity)
{
    neutronDensity = Map(neutronDensity, filamentGenerationSettingsBuffer[0].MapFromMin, filamentGenerationSettingsBuffer[0].MapFromMax, filamentGenerationSettingsBuffer[0].MapToMin, filamentGenerationSettingsBuffer[0].MapToMax);
    neutronDensity = pow(neutronDensity, filamentGenerationSettingsBuffer[0].Power);
    neutronDensity = neutronDensity * filamentGenerationSettingsBuffer[0].Amplitude;
    
    // TODO: Implement actual algorithm
    neutronDensity = neutronDensity * (1 + (filamentGenerationSettingsBuffer[0].UniverseNoiseInfluence * universeDensity));
    return neutronDensity;
}

float ProcessAntiNeutronDensity(float antiNeutronDensity, float universeDensity)
{
    antiNeutronDensity = Map(antiNeutronDensity, filamentGenerationSettingsBuffer[0].MapFromMin, filamentGenerationSettingsBuffer[0].MapFromMax, filamentGenerationSettingsBuffer[0].MapToMin, filamentGenerationSettingsBuffer[0].MapToMax);
    antiNeutronDensity = pow(antiNeutronDensity, filamentGenerationSettingsBuffer[0].Power);
    antiNeutronDensity = antiNeutronDensity * filamentGenerationSettingsBuffer[0].Amplitude;
    
    // TODO: Implement actual algorithm
    antiNeutronDensity = antiNeutronDensity * (1 + (filamentGenerationSettingsBuffer[0].UniverseNoiseInfluence * universeDensity));
    return antiNeutronDensity;
}

[numthreads(32,32,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int x = id.x;
    int y = id.y;
    int index = y * filamentGenerationSettingsBuffer[0].ChunkSize + x;
    electronDensityMap[index] = ProcessElectronDensity(electronDensityMap[index], universeDensityMap[index]);
    positronDensityMap[index] = ProcessPositronDensity(positronDensityMap[index], universeDensityMap[index]);
    protonDensityMap[index] = ProcessProtonDensity(protonDensityMap[index], universeDensityMap[index]);
    antiProtonDensityMap[index] = ProcessAntiProtonDensity(antiProtonDensityMap[index], universeDensityMap[index]);
    neutronDensityMap[index] = ProcessNeutronDensity(neutronDensityMap[index], universeDensityMap[index]);
    antiNeutronDensityMap[index] = ProcessAntiNeutronDensity(antiNeutronDensityMap[index], universeDensityMap[index]);
}
