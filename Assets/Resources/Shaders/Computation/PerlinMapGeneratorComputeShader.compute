// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct PerlinPixel
{
    int positionX;
    int positionY;
    float perlinValue;
};

int2 textureDimensions;
int seed;
float scale;
int octaves;
float persistence;
float lacunarity;
float amplitude;
float2 offset;

RWStructuredBuffer<PerlinPixel> perlinPixels;

FloatMap2D OLD_GenerateNoiseMap()
{
    float[,] noiseMap = new float[mapWidth, mapHeight];

    System.Random prng = new System.Random(seed);
    Vector2[] octaveOffsets = new Vector2[octaves];
    for (int i = 0; i < octaves; i++)
    {
        float offsetX = prng.Next(-100000, 100000) + offset.x;
        float offsetY = prng.Next(-100000, 100000) + offset.y;
        octaveOffsets[i] = new Vector2(offsetX, offsetY);
    }

    if (scale <= 0)
    {
        scale = 0.0001f;
    }

    float halfWidth = mapWidth / 2.0f;
    float halfHeight = mapHeight / 2.0f;

    for (int y = 0; y < mapHeight; y++)
    {
        for (int x = 0; x < mapWidth; x++)
        {
            float sampleAmplitude = 1.0f;
            float sampleFrequency = 1.0f;
            float noiseHeight = 0.0f;

            for (int i = 0; i < octaves; i++)
            {
                float sampleX = ((x - halfWidth + octaveOffsets[i].x) / scale) * sampleFrequency;
                float sampleY = ((y - halfHeight + octaveOffsets[i].y) / scale) * sampleFrequency;

                noiseHeight += (Mathf.PerlinNoise(sampleX, sampleY) * 2 - 1) * sampleAmplitude;

                sampleAmplitude *= persistence;
                sampleFrequency *= lacunarity;
            }

            noiseMap[x, y] = noiseHeight;
        }
    }

    float maxNoiseAmplitude = 0.0f;
    float noiseAmplitude = 1.0f;
    for (int i = 0; i < octaves; i++)
    {
        maxNoiseAmplitude += noiseAmplitude;
        noiseAmplitude *= persistence;
    }

    maxNoiseAmplitude *= 1 / amplitude;

    for (int y = 0; y < mapHeight; y++)
    {
        for (int x = 0; x < mapWidth; x++)
        {
            noiseMap[x, y] = Mathf.InverseLerp(-maxNoiseAmplitude, maxNoiseAmplitude, noiseMap[x, y]);
        }
    }

    return new FloatMap2D(noiseMap);
}

PerlinPixel CalculatePerlinPixel(PerlinPixel perlinPixel)
{
    return perlinPixel;
}

[numthreads(32, 32, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int x = id.x;
    int y = id.y;

    perlinPixels[y * textureDimensions.x + x] = CalculatePerlinPixel(perlinPixels[y * textureDimensions.x + x]);
}